"""Manual schema reset and creation

Revision ID: d4d5eabfd23e
Revises: 
Create Date: 2025-06-22 13:00:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd4d5eabfd23e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Use raw SQL with CASCADE to break the dependency cycle.
    # This is the most direct way to handle the circular FK constraints.
    op.execute('DROP TABLE IF EXISTS game CASCADE;')
    op.execute('DROP TABLE IF EXISTS story CASCADE;')
    op.execute('DROP TABLE IF EXISTS guess CASCADE;')
    op.execute('DROP TABLE IF EXISTS player CASCADE;')
    op.execute('DROP TABLE IF EXISTS "user" CASCADE;') # Use quotes for reserved word

    # Create new tables
    op.create_table('games',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_code', sa.String(length=4), nullable=True),
    sa.Column('status', sa.String(length=64), nullable=True),
    sa.Column('game_length', sa.String(length=64), nullable=True),
    sa.Column('game_mode', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_games_game_code'), 'games', ['game_code'], unique=True)

    op.create_table('players',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('story_text', sa.Text(), nullable=True),
    sa.Column('is_ready', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('stories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('results_revealed', sa.Boolean(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('guesses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('story_id', sa.Integer(), nullable=False),
    sa.Column('guesser_id', sa.Integer(), nullable=False),
    sa.Column('guessed_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['guessed_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['guesser_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['story_id'], ['stories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # Add the foreign key to games table after stories is created
    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.add_column(sa.Column('current_story_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_game_current_story_id', 'stories', ['current_story_id'], ['id'], use_alter=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.drop_constraint('fk_game_current_story_id', type_='foreignkey')
        batch_op.drop_column('current_story_id')
        
    op.drop_table('guesses')
    op.drop_table('stories')
    op.drop_table('players')
    op.drop_index(op.f('ix_games_game_code'), table_name='games')
    op.drop_table('games')
    # Downgrade does not attempt to restore the original user/player schema
    # ### end Alembic commands ###
