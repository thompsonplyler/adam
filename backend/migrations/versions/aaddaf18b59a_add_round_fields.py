"""add round fields

Revision ID: aaddaf18b59a
Revises: d4d5eabfd23e
Create Date: 2025-08-20 09:01:47.176429

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'aaddaf18b59a'
down_revision = 'd4d5eabfd23e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    insp = sa.inspect(bind)

    # If legacy plural tables exist, drop them safely with CASCADE in dependency order
    existing_tables = set(insp.get_table_names())
    if 'guesses' in existing_tables:
        op.execute('DROP TABLE IF EXISTS guesses CASCADE;')
    existing_tables = set(insp.get_table_names())
    if 'stories' in existing_tables:
        op.execute('DROP TABLE IF EXISTS stories CASCADE;')
    existing_tables = set(insp.get_table_names())
    if 'players' in existing_tables:
        op.execute('DROP TABLE IF EXISTS players CASCADE;')
    existing_tables = set(insp.get_table_names())
    if 'games' in existing_tables:
        # Drop any indexes implicitly when dropping
        op.execute('DROP TABLE IF EXISTS games CASCADE;')

    # Create singular tables if they do not exist yet
    existing_tables = set(insp.get_table_names())
    if 'game' not in existing_tables:
        op.create_table(
            'game',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('game_code', sa.String(length=4), index=True, unique=True),
            sa.Column('status', sa.String(length=64), nullable=True),
            sa.Column('stage', sa.String(length=64), nullable=True),
        )
    existing_tables = set(insp.get_table_names())
    if 'player' not in existing_tables:
        op.create_table(
            'player',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('name', sa.String(length=64), nullable=False),
            sa.Column('game_id', sa.Integer(), sa.ForeignKey('game.id'), nullable=False),
            sa.Column('score', sa.Integer(), nullable=True),
            sa.Column('has_submitted_story', sa.Boolean(), nullable=False, server_default=sa.text('false')),
        )
    existing_tables = set(insp.get_table_names())
    if 'story' not in existing_tables:
        op.create_table(
            'story',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('content', sa.Text(), nullable=False),
            sa.Column('is_read', sa.Boolean(), nullable=False, server_default=sa.text('false')),
            sa.Column('game_id', sa.Integer(), sa.ForeignKey('game.id'), nullable=False),
            sa.Column('author_id', sa.Integer(), sa.ForeignKey('player.id'), nullable=False),
        )
    existing_tables = set(insp.get_table_names())
    if 'guess' not in existing_tables:
        op.create_table(
            'guess',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('story_id', sa.Integer(), sa.ForeignKey('story.id'), nullable=False),
            sa.Column('guesser_id', sa.Integer(), sa.ForeignKey('player.id'), nullable=False),
            sa.Column('guessed_player_id', sa.Integer(), sa.ForeignKey('player.id'), nullable=False),
        )

    # Add round fields to game
    with op.batch_alter_table('game', schema=None) as batch_op:
        batch_op.add_column(sa.Column('current_round', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('total_rounds', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('play_order', sa.Text(), nullable=True))

    # Add current_story_id FK after story exists
    game_cols = {c['name'] for c in insp.get_columns('game')}
    if 'current_story_id' not in game_cols:
        with op.batch_alter_table('game', schema=None) as batch_op:
            batch_op.add_column(sa.Column('current_story_id', sa.Integer(), nullable=True))
            batch_op.create_foreign_key('fk_game_current_story_id', 'story', ['current_story_id'], ['id'], use_alter=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('game', schema=None) as batch_op:
        batch_op.drop_column('play_order')
        batch_op.drop_column('total_rounds')
        batch_op.drop_column('current_round')

    op.create_table('guesses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('story_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('guesser_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('guessed_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['guessed_id'], ['players.id'], name=op.f('guesses_guessed_id_fkey')),
    sa.ForeignKeyConstraint(['guesser_id'], ['players.id'], name=op.f('guesses_guesser_id_fkey')),
    sa.ForeignKeyConstraint(['story_id'], ['stories.id'], name=op.f('guesses_story_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('guesses_pkey'))
    )
    op.create_table('players',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('players_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('game_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('story_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_ready', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name='players_game_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='players_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('stories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('results_revealed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('game_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['players.id'], name='stories_author_id_fkey'),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name='stories_game_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('games',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('game_code', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('game_length', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('game_mode', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('current_story_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['current_story_id'], ['stories.id'], name=op.f('fk_game_current_story_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('games_pkey'))
    )
    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_games_game_code'), ['game_code'], unique=True)

    # ### end Alembic commands ###
